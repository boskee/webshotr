var userAgent = {};  
  
userAgent.ASSUME_IE = false;
userAgent.ASSUME_GECKO = false;
userAgent.ASSUME_WEBKIT = false;
userAgent.ASSUME_MOBILE_WEBKIT = false;
userAgent.ASSUME_OPERA = false;
userAgent.ASSUME_ANY_VERSION = false;
userAgent.BROWSER_KNOWN_ =
    userAgent.ASSUME_IE ||
    userAgent.ASSUME_GECKO ||
    userAgent.ASSUME_MOBILE_WEBKIT ||
    userAgent.ASSUME_WEBKIT ||
    userAgent.ASSUME_OPERA;
userAgent.getUserAgentString = function() {
  return window.navigator ? window.navigator.userAgent : null;
};
userAgent.getNavigator = function() {
  // Need a local navigator reference instead of using the global one,
  // to avoid the rare case where they reference different objects.
  // (goog.gears.FakeWorkerPool, for example).
  return window.navigator;
};  
  
userAgent.init_ = function() {
  /**
   * Whether the user agent string denotes Opera.
   * @type {boolean}
   * @private
   */
  userAgent.detectedOpera_ = false;

  /**
   * Whether the user agent string denotes Internet Explorer. This includes
   * other browsers using Trident as its rendering engine. For example AOL
   * and Netscape 8
   * @type {boolean}
   * @private
   */
  userAgent.detectedIe_ = false;

  /**
   * Whether the user agent string denotes WebKit. WebKit is the rendering
   * engine that Safari, Android and others use.
   * @type {boolean}
   * @private
   */
  userAgent.detectedWebkit_ = false;

  /**
   * Whether the user agent string denotes a mobile device.
   * @type {boolean}
   * @private
   */
  userAgent.detectedMobile_ = false;

  /**
   * Whether the user agent string denotes Gecko. Gecko is the rendering
   * engine used by Mozilla, Mozilla Firefox, Camino and many more.
   * @type {boolean}
   * @private
   */
  userAgent.detectedGecko_ = false;

  var ua;
  if (!userAgent.BROWSER_KNOWN_ &&
      (ua = userAgent.getUserAgentString())) {
    var navigator = userAgent.getNavigator();
    userAgent.detectedOpera_ = ua.indexOf('Opera') == 0;
    userAgent.detectedIe_ = !userAgent.detectedOpera_ &&
        ua.indexOf('MSIE') != -1;
    userAgent.detectedWebkit_ = !userAgent.detectedOpera_ &&
        ua.indexOf('WebKit') != -1;
    // WebKit also gives navigator.product string equal to 'Gecko'.
    userAgent.detectedMobile_ = userAgent.detectedWebkit_ &&
        ua.indexOf('Mobile') != -1;
    userAgent.detectedGecko_ = !userAgent.detectedOpera_ &&
        !userAgent.detectedWebkit_ && navigator.product == 'Gecko';
  }
};  

if (!userAgent.BROWSER_KNOWN_) {
  userAgent.init_();
}

userAgent.OPERA = userAgent.BROWSER_KNOWN_ ?
    userAgent.ASSUME_OPERA : userAgent.detectedOpera_;


/**
 * Whether the user agent is Internet Explorer. This includes other browsers
 * using Trident as its rendering engine. For example AOL and Netscape 8
 * @type {boolean}
 */
userAgent.IE = userAgent.BROWSER_KNOWN_ ?
    userAgent.ASSUME_IE : userAgent.detectedIe_;


/**
 * Whether the user agent is Gecko. Gecko is the rendering engine used by
 * Mozilla, Mozilla Firefox, Camino and many more.
 * @type {boolean}
 */
userAgent.GECKO = userAgent.BROWSER_KNOWN_ ?
    userAgent.ASSUME_GECKO :
    userAgent.detectedGecko_;


/**
 * Whether the user agent is WebKit. WebKit is the rendering engine that
 * Safari, Android and others use.
 * @type {boolean}
 */
userAgent.WEBKIT = userAgent.BROWSER_KNOWN_ ?
    userAgent.ASSUME_WEBKIT || userAgent.ASSUME_MOBILE_WEBKIT :
    userAgent.detectedWebkit_;


/**
 * Whether the user agent is running on a mobile device.
 * @type {boolean}
 */
userAgent.MOBILE = userAgent.ASSUME_MOBILE_WEBKIT ||
                        userAgent.detectedMobile_;


/**
 * Used while transitioning code to use WEBKIT instead.
 * @type {boolean}
 * @deprecated Use {@link userAgent.product.SAFARI} instead.
 * TODO(nicksantos): Delete this from userAgent.
 */
userAgent.SAFARI = userAgent.WEBKIT;

userAgent.isDocumentModeCache_ = {};

userAgent.isDocumentMode = function(documentMode) {
  return userAgent.isDocumentModeCache_[documentMode] ||
      (userAgent.isDocumentModeCache_[documentMode] = userAgent.IE &&
      !!document.documentMode && document.documentMode >= documentMode);
};
